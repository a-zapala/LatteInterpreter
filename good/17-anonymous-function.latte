(int, int) -> int add;

add = lambda:int (int a, int b) {
    return a + b;
};

print (add(2,3)); //should print 5

int sub(int a, int b) {
    return a - b;
}

void  swapBinaryOperation((int,int) -> int &binOp1, (int,int) -> int &binOp2) {
    (int,int) -> int tmp;
    tmp = binOp1;
    binOp1 = binOp2;
    binOp2 = tmp;
    return;
}

swapBinaryOperation(add,sub);

print (add(2,3)); // should print -1
print(sub(2,3)); // should print 5

(int,int) -> int createSumResultFin((int,int) -> int binOp1, (int,int) -> int binOp2) {
    return lambda: int (int a, int b) {
        return binOp1(a,b) + binOp2(a,b);
    };
}

(int, int) -> int twiceFirstArgument = createSumResultFin(add,sub);

print(twiceFirstArgument(5,8)); // should print 10